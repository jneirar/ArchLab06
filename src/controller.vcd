$date
	Thu Jul 08 19:59:34 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module controller_tb $end
$var wire 2 ! ResultSrc [1:0] $end
$var wire 1 " RegWrite $end
$var wire 2 # RegSrc [1:0] $end
$var wire 1 $ PCWrite $end
$var wire 1 % MemWrite $end
$var wire 2 & ImmSrc [1:0] $end
$var wire 1 ' IRWrite $end
$var wire 1 ( AdrSrc $end
$var wire 2 ) ALUSrcB [1:0] $end
$var wire 2 * ALUSrcA [1:0] $end
$var wire 2 + ALUControl [1:0] $end
$var reg 4 , ALUFlags [3:0] $end
$var reg 20 - Instr [31:12] $end
$var reg 1 . clk $end
$var reg 32 / i [31:0] $end
$var reg 1 0 reset $end
$scope module ctrl $end
$var wire 4 1 ALUFlags [3:0] $end
$var wire 20 2 Instr [31:12] $end
$var wire 1 . clk $end
$var wire 1 0 reset $end
$var wire 2 3 ResultSrc [1:0] $end
$var wire 1 " RegWrite $end
$var wire 1 4 RegW $end
$var wire 2 5 RegSrc [1:0] $end
$var wire 1 $ PCWrite $end
$var wire 1 6 PCS $end
$var wire 1 7 NextPC $end
$var wire 1 % MemWrite $end
$var wire 1 8 MemW $end
$var wire 2 9 ImmSrc [1:0] $end
$var wire 1 ' IRWrite $end
$var wire 2 : FlagW [1:0] $end
$var wire 1 ( AdrSrc $end
$var wire 2 ; ALUSrcB [1:0] $end
$var wire 2 < ALUSrcA [1:0] $end
$var wire 2 = ALUControl [1:0] $end
$scope module cl $end
$var wire 4 > ALUFlags [3:0] $end
$var wire 4 ? Cond [3:0] $end
$var wire 1 % MemWrite $end
$var wire 1 $ PCWrite $end
$var wire 1 " RegWrite $end
$var wire 1 . clk $end
$var wire 1 0 reset $end
$var wire 1 4 RegW $end
$var wire 1 6 PCS $end
$var wire 1 7 NextPC $end
$var wire 1 8 MemW $end
$var wire 4 @ Flags [3:0] $end
$var wire 2 A FlagWrite [1:0] $end
$var wire 2 B FlagW [1:0] $end
$var wire 1 C CondExReg $end
$var wire 1 D CondEx $end
$scope module cc $end
$var wire 4 E Cond [3:0] $end
$var wire 4 F Flags [3:0] $end
$var wire 1 G ge $end
$var wire 1 H zero $end
$var wire 1 I overflow $end
$var wire 1 J neg $end
$var wire 1 K carry $end
$var reg 1 D CondEx $end
$upscope $end
$scope module condexreg $end
$var wire 1 . clk $end
$var wire 1 D d $end
$var wire 1 0 reset $end
$var reg 1 C q $end
$upscope $end
$scope module flagsreg0 $end
$var wire 1 . clk $end
$var wire 2 L d [1:0] $end
$var wire 1 M en $end
$var wire 1 0 reset $end
$var reg 2 N q [1:0] $end
$upscope $end
$scope module flagsreg1 $end
$var wire 1 . clk $end
$var wire 2 O d [1:0] $end
$var wire 1 P en $end
$var wire 1 0 reset $end
$var reg 2 Q q [1:0] $end
$upscope $end
$scope module flagwritereg $end
$var wire 1 . clk $end
$var wire 2 R d [1:0] $end
$var wire 1 0 reset $end
$var reg 2 S q [1:0] $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 6 T Funct [5:0] $end
$var wire 2 U ImmSrc [1:0] $end
$var wire 2 V Op [1:0] $end
$var wire 1 6 PCS $end
$var wire 4 W Rd [3:0] $end
$var wire 1 . clk $end
$var wire 1 0 reset $end
$var wire 2 X ResultSrc [1:0] $end
$var wire 1 4 RegW $end
$var wire 2 Y RegSrc [1:0] $end
$var wire 1 7 NextPC $end
$var wire 1 8 MemW $end
$var wire 1 ' IRWrite $end
$var wire 1 Z Branch $end
$var wire 1 ( AdrSrc $end
$var wire 2 [ ALUSrcB [1:0] $end
$var wire 2 \ ALUSrcA [1:0] $end
$var wire 1 ] ALUOp $end
$var reg 2 ^ ALUControl [1:0] $end
$var reg 2 _ FlagW [1:0] $end
$scope module fsm $end
$var wire 6 ` Funct [5:0] $end
$var wire 2 a Op [1:0] $end
$var wire 1 . clk $end
$var wire 1 0 reset $end
$var wire 2 b ResultSrc [1:0] $end
$var wire 1 4 RegW $end
$var wire 1 7 NextPC $end
$var wire 1 8 MemW $end
$var wire 1 ' IRWrite $end
$var wire 1 Z Branch $end
$var wire 1 ( AdrSrc $end
$var wire 2 c ALUSrcB [1:0] $end
$var wire 2 d ALUSrcA [1:0] $end
$var wire 1 ] ALUOp $end
$var reg 13 e controls [12:0] $end
$var reg 4 f nextstate [3:0] $end
$var reg 4 g state [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 g
b1 f
b1000101001100 e
b1 d
b10 c
b10 b
bx a
bx `
b0 _
b0 ^
0]
b1 \
b10 [
0Z
bx Y
b10 X
bx W
bx V
bx U
bx T
b0 S
b0 R
b0 Q
0P
b1 O
b0 N
0M
b0 L
0K
0J
0I
0H
1G
b0 F
bx E
xD
0C
b0 B
b0 A
b0 @
bx ?
b100 >
b0 =
b1 <
b10 ;
b0 :
bx 9
08
17
06
bx 5
04
b10 3
bx 2
b100 1
10
b0 /
0.
bx -
b100 ,
b0 +
b1 *
b10 )
0(
1'
bx &
0%
1$
bx #
0"
b10 !
$end
#1
1.
#2
0.
00
#3
0$
07
0'
b1001100 e
b110 f
b1 g
xC
1D
b0 &
b0 9
b0 U
b0 #
b0 5
b0 Y
b0 V
b0 a
b100 T
b100 `
b0 W
b1110 ?
b1110 E
b1 /
b11100000010011110000 -
b11100000010011110000 2
1.
#4
0.
#5
b1 +
b1 =
b1 ^
b0 *
b0 <
b0 \
b0 d
b0 )
b0 ;
b0 [
b0 c
1]
b1000001 e
b1000 f
1C
b110 g
1.
#6
0.
#7
1"
14
b0 !
b0 3
b0 X
b0 b
b1 )
b1 ;
b1 [
b1 c
b1000000011 e
b0 f
b1000 g
1.
#8
0.
#9
1$
0"
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#10
0.
#11
0$
07
0'
b1001100 e
b111 f
b1 g
b100100 T
b100100 `
b10 W
b10 /
b11100010010000010010 -
b11100010010000010010 2
1.
#12
0.
#13
b1 +
b1 =
b1 ^
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
1]
b1000011 e
b1000 f
b111 g
1.
#14
0.
#15
1"
14
b0 !
b0 3
b0 X
b0 b
b1000000011 e
b0 f
b1000 g
1.
#16
0.
#17
1$
0"
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#18
0.
#19
0$
07
0'
b1001100 e
b110 f
b1 g
b1000 T
b1000 `
b11 W
b11 /
b11100000100000010011 -
b11100000100000010011 2
1.
#20
0.
#21
b0 *
b0 <
b0 \
b0 d
b0 )
b0 ;
b0 [
b0 c
1]
b1000001 e
b1000 f
b110 g
1.
#22
0.
#23
1"
14
b0 !
b0 3
b0 X
b0 b
b1 )
b1 ;
b1 [
b1 c
b1000000011 e
b0 f
b1000 g
1.
#24
0.
#25
1$
0"
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#26
0.
#27
0$
07
0'
b1001100 e
b111 f
b1 g
b101000 T
b101000 `
b1 W
b100 /
b11100010100000000001 -
b11100010100000000001 2
1.
#28
0.
#29
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
1]
b1000011 e
b1000 f
b111 g
1.
#30
0.
#31
1"
14
b0 !
b0 3
b0 X
b0 b
b1000000011 e
b0 f
b1000 g
1.
#32
0.
#33
1$
0"
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#34
0.
#35
0$
07
0'
b1001100 e
b110 f
b1 g
b11000 T
b11000 `
b100 W
b101 /
b11100001100000110100 -
b11100001100000110100 2
1.
#36
0.
#37
b11 +
b11 =
b11 ^
b0 *
b0 <
b0 \
b0 d
b0 )
b0 ;
b0 [
b0 c
1]
b1000001 e
b1000 f
b110 g
1.
#38
0.
#39
1"
14
b0 !
b0 3
b0 X
b0 b
b1 )
b1 ;
b1 [
b1 c
b1000000011 e
b0 f
b1000 g
1.
#40
0.
#41
1$
0"
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#42
0.
#43
0$
07
0'
b1001100 e
b111 f
b1 g
b111000 T
b111000 `
b11 W
b110 /
b11100011100001000011 -
b11100011100001000011 2
1.
#44
0.
#45
b11 +
b11 =
b11 ^
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
1]
b1000011 e
b1000 f
b111 g
1.
#46
0.
#47
1"
14
b0 !
b0 3
b0 X
b0 b
b1000000011 e
b0 f
b1000 g
1.
#48
0.
#49
1$
0"
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#50
0.
#51
0$
07
0'
b1001100 e
b110 f
b1 g
b1 T
b1 `
b111 /
b11100000000100010011 -
b11100000000100010011 2
1.
#52
0.
#53
b10 R
b10 :
b10 B
b10 _
b10 +
b10 =
b10 ^
b0 *
b0 <
b0 \
b0 d
b0 )
b0 ;
b0 [
b0 c
1]
b1000001 e
b1000 f
b110 g
1.
#54
0.
#55
1"
14
b0 !
b0 3
b0 X
b0 b
b1 )
b1 ;
b1 [
b1 c
b1000000011 e
b0 f
1P
b1000 g
b10 A
b10 S
1.
#56
0.
#57
b0 R
1$
0"
b0 :
b0 B
b0 _
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
1H
b1000101001100 e
b1 f
b100 @
b100 F
b1 Q
b0 g
1.
#58
0.
#59
0$
07
0'
b1001100 e
b1001 f
0P
b1 g
b0 A
b0 S
b10 &
b10 9
b10 U
b1 #
b1 5
b1 Y
b10 V
b10 a
b100000 T
b100000 `
b0 W
b0 ?
b0 E
b1000 /
b1010000000000000 -
b1010000000000000 2
1.
#60
0.
#61
1$
16
1Z
b10 *
b10 <
b10 \
b10 d
b1 )
b1 ;
b1 [
b1 c
b100001010010 e
b0 f
b1001 g
1.
#62
0.
#63
06
17
0Z
1'
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
b1000101001100 e
b1 f
b0 g
1.
#64
0.
#65
0$
07
0'
b1001100 e
b10 f
b1 g
b1 &
b1 9
b1 U
b10 #
b10 5
b10 Y
b1 V
b1 a
b11000 T
b11000 `
b10 W
b1110 ?
b1110 E
b1001 /
b11100101100000010010 -
b11100101100000010010 2
1.
#66
0.
#67
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
b1000010 e
b101 f
b10 g
1.
#68
0.
#69
1%
18
1(
b0 !
b0 3
b0 X
b0 b
b10010000010 e
b0 f
b101 g
1.
#70
0.
#71
1$
0%
17
08
1'
0(
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
b1000101001100 e
b1 f
b0 g
1.
#72
0.
#73
0$
07
0'
b1001100 e
b1001 f
b1 g
0D
b10 &
b10 9
b10 U
b1 #
b1 5
b1 Y
b10 V
b10 a
b101111 T
b101111 `
b1111 W
b1011 ?
b1011 E
b1010 /
b10111010111111111111 -
b10111010111111111111 2
1.
#74
0.
#75
16
1Z
b10 *
b10 <
b10 \
b10 d
b1 )
b1 ;
b1 [
b1 c
b100001010010 e
b0 f
b1001 g
0C
1.
#76
0.
#77
1$
06
17
0Z
1'
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
b1000101001100 e
b1 f
b0 g
1.
#78
0.
#79
0$
07
0'
b1001100 e
b1001 f
b1 g
1D
b100000 T
b100000 `
b0 W
b1110 ?
b1110 E
b1011 /
b11101010000000000000 -
b11101010000000000000 2
1.
#80
0.
#81
1$
16
1Z
b10 *
b10 <
b10 \
b10 d
b1 )
b1 ;
b1 [
b1 c
b100001010010 e
b0 f
1C
b1001 g
1.
#82
0.
#83
06
17
0Z
1'
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
b1000101001100 e
b1 f
b0 g
1.
#84
0.
#85
0$
07
0'
b1001100 e
b10 f
b1 g
b1 &
b1 9
b1 U
b10 #
b10 5
b10 Y
b1 V
b1 a
b11001 T
b11001 `
b11 W
b1100 /
b11100101100101010011 -
b11100101100101010011 2
1.
#86
0.
#87
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
b1000010 e
b11 f
b10 g
1.
#88
0.
#89
1(
b0 !
b0 3
b0 X
b0 b
b10000010 e
b100 f
b11 g
1.
#90
0.
#91
1"
14
b1 !
b1 3
b1 X
b1 b
b1010100010 e
b0 f
b100 g
1.
#92
0.
#93
1$
0"
17
04
1'
0(
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
b1000101001100 e
b1 f
b0 g
1.
#94
0.
#95
0$
07
0'
b1001100 e
b111 f
b1 g
b0 &
b0 9
b0 U
b0 #
b0 5
b0 Y
b0 V
b0 a
b100000 T
b100000 `
b100 W
b1101 /
b11100010000000110100 -
b11100010000000110100 2
1.
#96
0.
#97
b10 +
b10 =
b10 ^
b0 *
b0 <
b0 \
b0 d
b1 )
b1 ;
b1 [
b1 c
1]
b1000011 e
b1000 f
b111 g
1.
#98
0.
#99
1"
14
b0 !
b0 3
b0 X
b0 b
b1000000011 e
b0 f
b1000 g
1.
#100
0.
#101
1$
0"
b0 +
b0 =
b0 ^
17
04
1'
b10 !
b10 3
b10 X
b10 b
b1 *
b1 <
b1 \
b1 d
b10 )
b10 ;
b10 [
b10 c
0]
b1000101001100 e
b1 f
b0 g
1.
#102
0.
#103
0$
07
0'
b1001100 e
b111 f
b1 g
1.
